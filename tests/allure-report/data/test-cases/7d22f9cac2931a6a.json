{
  "uid" : "7d22f9cac2931a6a",
  "name" : "Удаление продукта",
  "fullName" : "tests.test_admin_page#test_delete_product",
  "historyId" : "a749e41098ab2696b3705b84cdb546f0",
  "time" : {
    "start" : 1623592158858,
    "stop" : 1623592158858,
    "duration" : 0
  },
  "description" : "Тест проверяет возможность удалить продукт",
  "descriptionHtml" : "<p>Тест проверяет возможность удалить продукт</p>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: A WebDriver instance must be supplied",
  "statusTrace" : "request = <SubRequest 'browser' for <Function test_delete_product>>\n\n    @pytest.fixture\n    def browser(request):\n        browser = request.config.getoption(\"--browser\")\n        executor = request.config.getoption(\"--executor\")\n        ver = request.config.getoption(\"--ver\")\n        headless = request.config.getoption(\"--headless\")\n        maximized = request.config.getoption(\"--maximized\")\n        vnc = request.config.getoption(\"--vnc\")\n        logs = request.config.getoption(\"--logs\")\n        videos = request.config.getoption(\"--videos\")\n        logger = logging.getLogger('browseLogger')\n        test_name = request.node.name\n        url = 'http://192.168.0.11'\n    \n        logger.info(f\"===> Test {test_name} started\")\n    \n        if executor == \"local\":\n            if browser == 'chrome':\n                options = webdriver.ChromeOptions()\n                options.headless = headless\n                driver = webdriver.Chrome(options=options)\n            elif browser == 'firefox':\n                options = webdriver.FirefoxOptions()\n                options.headless = headless\n                driver = webdriver.Firefox(options=options)\n            elif browser == 'opera':\n                driver = webdriver.Opera()\n            else:\n                raise ValueError('driver not supported: {}'.format(browser))\n    \n            driver = EventFiringWebDriver(driver, MyListener())\n    \n            if maximized:\n                driver.maximize_window()\n        else:\n            exe_url = f\"http://{executor}:4444/wd/hub\"\n    \n            caps = {\n                \"browserName\": browser,\n                \"browserVersion\": ver,\n                \"screenResolution\": \"1280x720\",\n                \"name\": \"Anton\",\n                \"selenoid:options\": {\n                    \"enableVNC\": vnc,\n                    \"enableVideo\": videos,\n                    \"enableLog\": logs\n                },\n                'acceptSslCerts': True,\n                'acceptInsecureCerts': True,\n                'timeZone': 'Europe/Moscow',\n                'goog:chromeOptions': {}\n            }\n    \n            driver = webdriver.Remote(\n                command_executor=exe_url,\n                desired_capabilities=caps\n            )\n    \n            if maximized:\n                driver.maximize_window()\n            driver.url = url\n    \n>       driver = EventFiringWebDriver(driver, MyListener())\n\n../conftest.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.event_firing_webdriver.EventFiringWebDriver object at 0x7f78a5061a30>\ndriver = <selenium.webdriver.support.event_firing_webdriver.EventFiringWebDriver object at 0x7f78a50612b0>\nevent_listener = <conftest.MyListener object at 0x7f78a5061be0>\n\n    def __init__(self, driver, event_listener):\n        \"\"\"\n        Creates a new instance of the EventFiringWebDriver\n    \n        :Args:\n         - driver : A WebDriver instance\n         - event_listener : Instance of a class that subclasses AbstractEventListener and implements it fully or partially\n    \n        Example:\n    \n        .. code-block:: python\n    \n            from selenium.webdriver import Firefox\n            from selenium.webdriver.support.events import EventFiringWebDriver, AbstractEventListener\n    \n            class MyListener(AbstractEventListener):\n                def before_navigate_to(self, url, driver):\n                    print(\"Before navigate to %s\" % url)\n                def after_navigate_to(self, url, driver):\n                    print(\"After navigate to %s\" % url)\n    \n            driver = Firefox()\n            ef_driver = EventFiringWebDriver(driver, MyListener())\n            ef_driver.get(\"http://www.google.co.in/\")\n        \"\"\"\n        if not isinstance(driver, WebDriver):\n>           raise WebDriverException(\"A WebDriver instance must be supplied\")\nE           selenium.common.exceptions.WebDriverException: Message: A WebDriver instance must be supplied\n\n../venv/lib/python3.8/site-packages/selenium/webdriver/support/event_firing_webdriver.py:65: WebDriverException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "get_environment",
    "time" : {
      "start" : 1623592154647,
      "stop" : 1623592154647,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "browser",
    "time" : {
      "start" : 1623592158860,
      "stop" : 1623592160606,
      "duration" : 1746
    },
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: A WebDriver instance must be supplied\n\n",
    "statusTrace" : "  File \"/home/anton/PycharmProjects/python_qa_logging_and_reports/venv/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/anton/PycharmProjects/python_qa_logging_and_reports/venv/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/anton/PycharmProjects/python_qa_logging_and_reports/venv/lib/python3.8/site-packages/_pytest/fixtures.py\", line 932, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/anton/PycharmProjects/python_qa_logging_and_reports/conftest.py\", line 85, in browser\n    driver = EventFiringWebDriver(driver, MyListener())\n  File \"/home/anton/PycharmProjects/python_qa_logging_and_reports/venv/lib/python3.8/site-packages/selenium/webdriver/support/event_firing_webdriver.py\", line 65, in __init__\n    raise WebDriverException(\"A WebDriver instance must be supplied\")\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1623592154647,
      "stop" : 1623592154647,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Тест проверяет возможность удалить продукт",
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: A WebDriver instance must be supplied",
    "statusTrace" : "request = <SubRequest 'browser' for <Function test_delete_product>>\n\n    @pytest.fixture\n    def browser(request):\n        browser = request.config.getoption(\"--browser\")\n        executor = request.config.getoption(\"--executor\")\n        ver = request.config.getoption(\"--ver\")\n        headless = request.config.getoption(\"--headless\")\n        maximized = request.config.getoption(\"--maximized\")\n        vnc = request.config.getoption(\"--vnc\")\n        logs = request.config.getoption(\"--logs\")\n        videos = request.config.getoption(\"--videos\")\n        logger = logging.getLogger('browseLogger')\n        test_name = request.node.name\n        url = 'http://192.168.0.11'\n    \n        logger.info(f\"===> Test {test_name} started\")\n    \n        if executor == \"local\":\n            if browser == 'chrome':\n                options = webdriver.ChromeOptions()\n                options.headless = headless\n                driver = webdriver.Chrome(options=options)\n            elif browser == 'firefox':\n                options = webdriver.FirefoxOptions()\n                options.headless = headless\n                driver = webdriver.Firefox(options=options)\n            elif browser == 'opera':\n                driver = webdriver.Opera()\n            else:\n                raise ValueError('driver not supported: {}'.format(browser))\n    \n            driver = EventFiringWebDriver(driver, MyListener())\n    \n            if maximized:\n                driver.maximize_window()\n        else:\n            exe_url = f\"http://{executor}:4444/wd/hub\"\n    \n            caps = {\n                \"browserName\": browser,\n                \"browserVersion\": ver,\n                \"screenResolution\": \"1280x720\",\n                \"name\": \"Anton\",\n                \"selenoid:options\": {\n                    \"enableVNC\": vnc,\n                    \"enableVideo\": videos,\n                    \"enableLog\": logs\n                },\n                'acceptSslCerts': True,\n                'acceptInsecureCerts': True,\n                'timeZone': 'Europe/Moscow',\n                'goog:chromeOptions': {}\n            }\n    \n            driver = webdriver.Remote(\n                command_executor=exe_url,\n                desired_capabilities=caps\n            )\n    \n            if maximized:\n                driver.maximize_window()\n            driver.url = url\n    \n>       driver = EventFiringWebDriver(driver, MyListener())\n\n../conftest.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.event_firing_webdriver.EventFiringWebDriver object at 0x7f78a5061a30>\ndriver = <selenium.webdriver.support.event_firing_webdriver.EventFiringWebDriver object at 0x7f78a50612b0>\nevent_listener = <conftest.MyListener object at 0x7f78a5061be0>\n\n    def __init__(self, driver, event_listener):\n        \"\"\"\n        Creates a new instance of the EventFiringWebDriver\n    \n        :Args:\n         - driver : A WebDriver instance\n         - event_listener : Instance of a class that subclasses AbstractEventListener and implements it fully or partially\n    \n        Example:\n    \n        .. code-block:: python\n    \n            from selenium.webdriver import Firefox\n            from selenium.webdriver.support.events import EventFiringWebDriver, AbstractEventListener\n    \n            class MyListener(AbstractEventListener):\n                def before_navigate_to(self, url, driver):\n                    print(\"Before navigate to %s\" % url)\n                def after_navigate_to(self, url, driver):\n                    print(\"After navigate to %s\" % url)\n    \n            driver = Firefox()\n            ef_driver = EventFiringWebDriver(driver, MyListener())\n            ef_driver.get(\"http://www.google.co.in/\")\n        \"\"\"\n        if not isinstance(driver, WebDriver):\n>           raise WebDriverException(\"A WebDriver instance must be supplied\")\nE           selenium.common.exceptions.WebDriverException: Message: A WebDriver instance must be supplied\n\n../venv/lib/python3.8/site-packages/selenium/webdriver/support/event_firing_webdriver.py:65: WebDriverException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "67f4d629fc0bd1cd",
      "name" : "log",
      "source" : "67f4d629fc0bd1cd.txt",
      "type" : "text/plain",
      "size" : 74
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Проверка магазина на opencart"
  }, {
    "name" : "suite",
    "value" : "Тесты страницы админки"
  }, {
    "name" : "parentSuite",
    "value" : "Проверка тестового магазина opencart"
  }, {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "feature",
    "value" : "Проверка админки"
  }, {
    "name" : "host",
    "value" : "anton-Aspire-Z3-605"
  }, {
    "name" : "thread",
    "value" : "133154-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_admin_page"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "7d22f9cac2931a6a.json",
  "parameterValues" : [ ]
}